#include <iostream>
#include <fstream>
#include <iomanip>
using namespace std;

class bukv_inform{
	char name;                                       //буква
	int k;                                           //cколькими вариантами закобировался символ
	int inform[257][2];                              //хранит ASCII-код кодирующих символов и то, сколько раз он кодирует введёный символ 
	char sootvsimvoj[256];                           //хранит кодирующие символы
public:
	void vvod(char *text, char *codtext, int n);     //вычисление информации по введёному символу
	void shov();                                     //вывод таблици
};

void bukv_inform::vvod(char *text, char *codtext, int n)
{
	cout <<"Введите интересующий вас символ: ";
	cin >>name;
	bool t;
	k= 0;
	int cod;
	for(int i= 0;i < n;i++)
	{
		if(text[i] == name)
		{
			t= 1;
			cod= (int)codtext[i];
			if(cod < 0) cod= 256+cod;
			for(int j= 0; j < k; j++)
			{
				if(cod == inform[j][0]) 
				{
					inform[j][1]++;
					t= 0;
					break; 
				}
			}
			if(t)
			{
				inform[k][0]= cod;
				inform[k][1]= 1;
				sootvsimvoj[k]= codtext[i];
				k++;
			}
		}
	}
}
void bukv_inform::shov()
{
	cout <<"\n №     " <<"ASCII-код    " <<"Кодовый символ    " <<"В программе встречается\n";
	for(int i= 0; i < k; i++)
	{
		cout <<setw(3) <<i <<setw(9) <<inform[i][0] <<setw(13);
		if(inform[i][0] == 10) cout <<"\\n" <<setw(23)<<inform[i][1] <<"\n";
		else if(inform[i][0] == 9) cout <<"\\t" <<setw(23)<<inform[i][1] <<"\n";
		else if((inform[i][0] == 149)||(inform[i][0] == 7)) cout <<"\\r" <<setw(23)<<inform[i][1] <<"\n";
		else if(inform[i][0] == 13) cout <<"\\f" <<setw(23)<<inform[i][1] <<"\n";
		else cout <<sootvsimvoj[i] <<setw(23)<<inform[i][1] <<"\n";
	}
}

int main()
{
	setlocale(0, "russian");
	ifstream in("Input.in");
	if(!in)
	{
		cout <<"Невозможно открыть файл./n";
		system("Pause");
		return 1;
	}
	ofstream out("Output.out");
	if(!out)
	{
		cout <<"Невозможно открыть файл./n";
		system("Pause");
		return 1;
	}
	in.unsetf(ios::skipws);   //чтоб пробелы и др. подобные символы считывались из файла
	bukv_inform bukva;        //Обыявляю объект класса bukv_inform
	int cod;            //переменная для хранения кода отдельного символа

//---------------------------------------------------------Создание и заполнение массива----------------------------------------------------------------------	
	int n= 2200;
	char *text;
	try{
		text= new char [n];
	}catch(bad_alloc xa){
		cout <<"Ошибка.\n";
		system("Pause");
		return 1;
	}
	for(n= 0; !in.eof(); n++)   //символы считываются пока не обнаружится конец файла, заодно ведётся подсчёт считанных элеметов
		in >>text[n];
	n--;                        //уменьшаем на 1 чтоб не выводился какой-то левый символ

//------------------------------------------------------------------Вывод массива(на экран)------------------------------------------------------------------------------	
/*		for(int i= 0;i < n; i++)
			cout <<text[i];
		cout <<"\n\n";
*/	
//------------------------------------------------------------Cоздание массива ключей---------------------------------------------------------------------------
	int *scod;
	scod= new int [n];  //массив ключей(ключ - сумма кодов одного слова)

	scod[0]= 0;
	for(int i=0, j= 0;j < n;i= i!=n ? i+1 : 0)
	{
		if(text[i] == ' ')
		{
			j++;
			scod[j]= 0;
		}else{
			cod= (int)text[i];
			if(cod < 0) cod= 256+cod;
			scod[j]+= cod;
		}
	}

//------------------------------------------------------------------Вывод массива ключей(контрольный)------------------------------------------------------------------------------	
//		for(int i= 0;i < n; i++)
//		{
//			if(scod[i] == 1666){cout <<scod[i] <<'\n';
//		}else{cout <<scod[i] <<' ';}
//		}
//		cout <<"\n\n";

//------------------------------------------------------------Кодирую текст---------------------------------------------------------------------------
	char *codtext;
	codtext= new char [n]; //закодированный текст
	for(int i=0;i < n;i++)
	{
		cod= (int)text[i];
		if(cod < 0) cod= 256+cod;
		codtext[i]=(char)((cod+scod[i])%256);
	}

//----------------------------------------------------Вывод закодированого массива(на экран)----------------------------------------------------------------	
		for(int i= 0;i < n; i++)
			cout <<codtext[i];
		cout <<"\n\n";

//------------------------------------------------------------Декодирую текст---------------------------------------------------------------------------
	for(int i=0;i < n;i++)
	{
		cod= (int)codtext[i];
		if(cod < 0) cod= 256+cod;
		text[i]=(char)((cod-scod[i])%256);
	}

//------------------------------------------------------------------Вывод декодированого массива(на экран)------------------------------------------------------------------------------	
		for(int i= 0;i < n; i++)
			cout <<text[i];
		cout <<"\n\n";

//----------------------------------------------------Вывод закодированого массива(в файл)----------------------------------------------------------------	
	for(int i= 0;i < n; i++)
		out <<codtext[i];

//------------------------------------------------------------Интерактивная часть-----------------------------------------------------------------------------
/*	//закоментирован старый вариант который без классов и без таблици
	char ex;                                
	do{
	char simvol;
	cout <<"Введите интересующий вас символ: ";
	cin >>simvol;
	for(int i= 0, k= 0;i < n;i++)
	{
		if(text[i] == simvol)
		{
			k++;
			cod= (int)codtext[i];
			if(cod < 0) cod= 128+abs(cod);
			cout <<k <<") Значение по таблице ASCII-кодов " <<cod <<" кодовый символ - " <<codtext[i] <<"\n";
		}
	}
	cout <<"Выйти?";
	cin >>ex;
	}while(ex != 'y');
*/		char ex;
	do{
		bukva.vvod(text, codtext, n);
		bukva.shov();
	cout <<"Выйти?";
	cin >>ex;
	}while(ex != 'y');

//--------------------------------------------------------------------The End-----------------------------------------------------------------------------------
	delete [] text;
	delete [] codtext;
	return 0;
}